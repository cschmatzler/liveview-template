logging {
  level  = "debug"
  format = "logfmt"
}

otelcol.receiver.otlp "traces" {
  grpc {}
  http {}

  output {
    traces  = [otelcol.processor.batch.traces]
  }
}

otelcol.processor.batch "traces" {
  output {
    traces = [otelcol.exporter.otlp.tempo.input]
  }
}

otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "http://tempo-distributor.monitoring.svc.cluster.local:4317"
  }
}

discovery.kubernetes "pods" {
  role = "pod"
}

discovery.kubernetes "services" {
  role = "service"
}

discovery.relabel "kubernetes_metrics" {
  targets = concat(discovery.kubernetes.pods.targets, discovery.kubernetes.services.targets)

  rule {
    source_labels = [
      "__meta_kubernetes_pod_labelpresent_grafana_agent_collect_metrics",
      "__meta_kubernetes_service_labelpresent_grafana_agent_collect_metrics",
    ]
    action = "keep"
    regex = ";*(true;?)*"
  }
}

discovery.relabel "kubernetes_logs" {
  targets = discovery.kubernetes.pods.targets

  rule {
    source_labels = ["__meta_kubernetes_pod_label_grafana_agent_collect_logs"]
    action = "keep"
    regex = "true"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action = "replace"
    target_label = "node"
  }
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }
  rule {
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_name",
      "__meta_kubernetes_pod_label_app",
      "__meta_kubernetes_pod_label_k8s_app",
    ]
    action = "replace"
    target_label = "app"
    regex = ";*([^;]+);*.*"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }
}

prometheus.scrape "metrics" {
  targets = discovery.relabel.kubernetes_metrics.output

  scrape_interval = "15s"

  forward_to = [prometheus.remote_write.local.receiver]
}

loki.source.kubernetes "pods" {
  targets    = discovery.relabel.kubernetes_logs.output
  forward_to = [loki.write.local.receiver]
}

prometheus.remote_write "local" {
  endpoint {
    url = "http://mimir-distributor.monitoring.svc.cluster.local:8080/api/v1/push"
    headers = {
      "X-Scope-OrgID" = "liveview-template.app",
    }
  }
}

loki.write "local" {
  endpoint {
    url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
  }
  external_labels = {
    exporter = "grafana-agent",
  }
}
