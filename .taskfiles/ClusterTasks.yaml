version: "3"

tasks:
  bootstrap:
    desc: Bootstrap the Kubernetes cluster
    cmds:
      - talosctl --talosconfig {{.INFRA_DIR}}/talosconfig bootstrap
      - talosctl --talosconfig {{.INFRA_DIR}}/talosconfig kubeconfig {{.KUBERNETES_DIR}}/kubeconfig
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/bootstrap
      - cat {{.SOPS_AGE_KEY_FILE}} | kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/github-deploy-key.sops.yaml | kubectl apply -f -
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/onepassword-credentials.sops.yaml | kubectl apply -f -
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/flux/config
    preconditions:
      - sh: flux check --pre
        msg: |
          The cluster did not meet the minimum requirements for Flux.
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
        msg: |
          Could not find age key.
      - sh: test -f {{.KUBERNETES_DIR}}/bootstrap/github-deploy-key.sops.yaml
        msg: |
          Could not find GitHub deploy key.
      - sh: test -f {{.KUBERNETES_DIR}}/bootstrap/onepassword-credentials.sops.yaml
        msg: |
          Could not find 1Password credentials.

  k9s:
    desc: Open k9s
    cmds:
      - k9s


  sync-gr:
    desc: Sync Flux GitRepositories
    cmds:
      - |
        kubectl get gitrepositories --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P4 -L1 bash -c \
            'kubectl -n $0 annotate gitrepository/$1 reconcile.fluxcd.io/requestedAt=$(date +%s) --field-manager=flux-client-side-apply --overwrite'

  sync-es:
    desc: Sync ExternalSecret resources
    vars:
      secret: '{{ .secret | default ""}}'
      namespace: '{{.namespace | default "default"}}'
    cmds:
      - |
        {{if eq .secret ""}}
          kubectl get externalsecret.external-secrets.io --all-namespaces --no-headers -A | awk '{print $1, $2}' \
            | xargs -P4 -L1 bash -c \
              'kubectl -n $0 annotate externalsecret.external-secrets.io $1 force-sync=$(date +%s) --overwrite'
        {{else}}
          kubectl -n {{.namespace}} annotate externalsecret.external-secrets.io {{.secret}} force-sync=$(date +%s) --overwrite
        {{end}}
    preconditions:
      - kubectl -n {{.namespace}} get es {{.secret}}
