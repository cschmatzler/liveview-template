version: "3"

tasks:
  generate-cilium-manifest:
    desc: Generate the most recent Cilium manifest
    cmds:
      - helm repo add cilium https://helm.cilium.io --force-update
      - helm repo update
      - |-
        helm template \
          cilium \
          cilium/cilium \
          --version {{.CILIUM_VERSION}} \
          --namespace kube-system \
          --set ipam.mode=kubernetes \
          --set=kubeProxyReplacement=strict \
          --set=securityContext.capabilities.ciliumAgent="{CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}" \
          --set=securityContext.capabilities.cleanCiliumState="{NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}" \
          --set=cgroup.autoMount.enabled=false \
          --set=cgroup.hostRoot=/sys/fs/cgroup \
          --set=k8sServiceHost=cluster.{{.BASE_DOMAIN}} \
          --set=k8sServicePort="6443" > ./kubernetes/bootstrap/cilium.yaml

  bootstrap:
    desc: Bootstrap the Kubernetes cluster
    cmds:
      - kubectl apply --server-side --kustomize {{.KUBERNETES_DIR}}/bootstrap
      - cat {{.SOPS_AGE_KEY_FILE}} | kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/github-deploy-key.sops.yaml | kubectl apply -f -
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/dockerconfig-github.sops.yaml | kubectl apply -f -
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/onepassword-credentials.sops.yaml | kubectl apply -f -
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/flux/config
    preconditions:
      - sh: flux check --pre
        msg: |
          The cluster did not meet the minimum requirements for Flux.
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
        msg: |
          Could not find age key.
      - sh: test -f {{.KUBERNETES_DIR}}/bootstrap/github-deploy-key.sops.yaml
        msg: |
          Could not find GitHub deploy key.
      - sh: test -f {{.KUBERNETES_DIR}}/bootstrap/onepassword-credentials.sops.yaml
        msg: |
          Could not find 1Password credentials.

  approve-csr:
    desc: Approve all outstanding CSR requests
    cmds:
      - |
        kubectl get csr -o custom-columns=":metadata.name" \
          | xargs -P4 -L1 kubectl certificate approve

  k9s:
    desc: Open k9s
    cmds:
      - k9s

  sync-gr:
    desc: Sync Flux GitRepositories
    cmds:
      - |
        kubectl get gitrepositories --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P4 -L1 bash -c \
            'kubectl -n $0 annotate gitrepository/$1 reconcile.fluxcd.io/requestedAt=$(date +%s) --field-manager=flux-client-side-apply --overwrite'

  sync-ks:
    desc: Sync Flux Kustomizations
    cmds:
      - |
        kubectl get kustomization --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P4 -L1 bash -c \
            'kubectl -n $0 annotate kustomization/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --field-manager=flux-client-side-apply --overwrite'

  sync-hr:
    desc: Sync Flux HelmReleases
    cmds:
      - |
        kubectl get helmreleases --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P4 -L1 bash -c \
            'kubectl -n $0 annotate helmrelease/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --overwrite'

  sync-es:
    desc: Sync ExternalSecret resources
    vars:
      secret: '{{ .secret | default ""}}'
      namespace: '{{.namespace | default "default"}}'
    cmds:
      - |
        {{if eq .secret ""}}
          kubectl get externalsecret.external-secrets.io --all-namespaces --no-headers -A | awk '{print $1, $2}' \
            | xargs -P4 -L1 bash -c \
              'kubectl -n $0 annotate externalsecret.external-secrets.io $1 force-sync=$(date +%s) --overwrite'
        {{else}}
          kubectl -n {{.namespace}} annotate externalsecret.external-secrets.io {{.secret}} force-sync=$(date +%s) --overwrite
        {{end}}
    preconditions:
      - kubectl -n {{.namespace}} get es {{.secret}}

  restart-hr:
    desc: Restart all failed Helm Releases
    cmds:
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -L1 bash -c 'flux suspend hr $0 -n $1'
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -L1 bash -c 'flux resume hr $0 -n $1'
