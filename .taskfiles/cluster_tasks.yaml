version: "3"

vars:
  TALOS_DIR: "{{.ROOT_DIR}}/infrastructure/talos"

tasks:
  init:
    desc: Generate secret and configuration files
    cmds:
      - talosctl gen secrets -o {{.TALOS_DIR}}/secrets.yaml
      - talosctl gen config --with-secrets {{.TALOS_DIR}}/secrets.yaml --config-patch-control-plane @{{.TALOS_DIR}}/cni.yaml --with-examples=false --with-docs=false -o {{.TALOS_DIR}} liveview-template https://cluster.$DOMAIN:6443
    preconditions:
      - sh: "! test -f infrastructure/secrets.yaml"
        msg: |
          Configuration already exists.

  bootstrap:
    desc: Bootstrap the Kubernetes cluster
    cmds:
      - kustomize build --enable-helm {{.KUBERNETES_DIR}}/bootstrap | kubectl apply --server-side -f -
      - cat {{.SOPS_AGE_KEY_FILE}} | kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/github-deploy-key.sops.yaml | kubectl apply -f -
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/dockerconfig-github.sops.yaml | kubectl apply -f -
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/onepassword-credentials.sops.yaml | kubectl apply -f -
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/flux/config
    preconditions:
      - sh: flux check --pre
        msg: |
          The cluster did not meet the minimum requirements for Flux.
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
        msg: |
          Could not find age key.
      - sh: test -f {{.KUBERNETES_DIR}}/bootstrap/github-deploy-key.sops.yaml
        msg: |
          Could not find GitHub deploy key.
      - sh: test -f {{.KUBERNETES_DIR}}/bootstrap/onepassword-credentials.sops.yaml
        msg: |
          Could not find 1Password credentials.

  approve-csr:
    desc: Approve all outstanding CSR requests
    cmds:
      - |
        kubectl get csr -o custom-columns=":metadata.name" \
          | xargs -P4 -L1 kubectl certificate approve

  k9s:
    desc: Open k9s
    cmds:
      - k9s

  sync-gr:
    desc: Sync Flux GitRepositories
    cmds:
      - |
        kubectl get gitrepositories --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P4 -L1 bash -c \
            'kubectl -n $0 annotate gitrepository/$1 reconcile.fluxcd.io/requestedAt=$(date +%s) --field-manager=flux-client-side-apply --overwrite'

  sync-ks:
    desc: Sync Flux Kustomizations
    cmds:
      - |
        kubectl get kustomization --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P4 -L1 bash -c \
            'kubectl -n $0 annotate kustomization/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --field-manager=flux-client-side-apply --overwrite'

  sync-hr:
    desc: Sync Flux HelmReleases
    cmds:
      - |
        kubectl get helmreleases --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P4 -L1 bash -c \
            'kubectl -n $0 annotate helmrelease/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --overwrite'

  sync-es:
    desc: Sync ExternalSecret resources
    vars:
      secret: '{{ .secret | default ""}}'
      namespace: '{{.namespace | default "default"}}'
    cmds:
      - |
        {{if eq .secret ""}}
          kubectl get externalsecret.external-secrets.io --all-namespaces --no-headers -A | awk '{print $1, $2}' \
            | xargs -P4 -L1 bash -c \
              'kubectl -n $0 annotate externalsecret.external-secrets.io $1 force-sync=$(date +%s) --overwrite'
        {{else}}
          kubectl -n {{.namespace}} annotate externalsecret.external-secrets.io {{.secret}} force-sync=$(date +%s) --overwrite
        {{end}}
    preconditions:
      - kubectl -n {{.namespace}} get es {{.secret}}

  restart-hr:
    desc: Restart all failed Helm Releases
    cmds:
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -L1 bash -c 'flux suspend hr $0 -n $1'
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -L1 bash -c 'flux resume hr $0 -n $1'
