name: "Grafana Provisioning: Validate and Plan"
on:
  pull_request:
    paths:
      - "k8s/workloads/monitoring/grafana/provision/**/*.tf"
jobs:
  validate-and-plan:
    name: Validate and Plan
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: k8s/workloads/monitoring/grafana/provision/
    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2
      - name: Log into 1Password
        uses: 1password/load-secrets-action/configure@971116bbffed9bfe57bd55447317d56fbc7a6a81 # v1
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      - name: Fetch secrets from 1Password
        uses: 1password/load-secrets-action@971116bbffed9bfe57bd55447317d56fbc7a6a81 # v1
        with:
          export-env: true
        env:
          # Tailscale
          TAILSCALE_AUTHKEY: op://liveview-template/github-actions/TAILSCALE_AUTHKEY
          # Terraform state
          AWS_ACCESS_KEY_ID: op://liveview-template/terraform/AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: op://liveview-template/terraform/AWS_SECRET_ACCESS_KEY
          # Grafana
          TF_VAR_admin_auth: op://liveview-template/grafana/GF_ADMIN_AUTH
          # TODO: this fails for when we're having multiple users
          # create specific vault with shareable items?
          TF_VAR_user_christoph_password: op://liveview-template/grafana/password
      - name: Log into Tailscale
        uses: tailscale/github-action@cc6818dd6930277a6e4b5d249e32ba2f4cf6ea32 # v1
        with:
          version: 1.40.1
          authkey: ${{ env.TAILSCALE_AUTHKEY }}
      - name: Check formatting
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Initialize Terraform
        id: init
        run: terraform init
      - name: Validate Terraform configuration
        id: validate
        run: terraform validate -no-color
      - name: Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Formatting: \`${{ steps.fmt.outcome }}\`
            #### Initialization: \`${{ steps.init.outcome }}\`
            #### Validation: \`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Plan: \`${{ steps.plan.outcome }}\`

            <details><summary>Plan Output</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            Actor: @${{ github.actor }}, Action: \`${{ github.event_name }}\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
