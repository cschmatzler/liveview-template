name: "Terraform: Plan"

on:
  pull_request:
    paths:
      - "infra/**/*.tf"

jobs:
  plan:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: infra/
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Check formatting
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Initialize Terraform
        id: init
        run: terraform init
        env:
          # State backend
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Validate Terraform configuration
        id: validate
        run: terraform validate -no-color

      - name: Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        env:
          # State backend
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # Infrastructure provider authorization
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
          # Talos configuration encryption
          SOPS_AGE_RECIPIENTS: ${{ secrets.SOPS_AGE_RECIPIENTS }}
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Formatting: \`${{ steps.fmt.outcome }}\`
            #### Initialization: `${{ steps.init.outcome }}\`
            #### Validation: `${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Plan: `${{ steps.plan.outcome }}\`

            <details><summary>Plan Output</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
