{"source_files":[{"coverage":[null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,null,0,null,null,null,null,1,null,1,null,null,1,null,null],"name":"lib/template/application.ex","source":"defmodule Template.Application do\n  @moduledoc \"\"\"\n  Main entrypoint for the service.\n  \"\"\"\n\n  use Boundary, deps: [Template.Repo, Template.Web], top_level?: true\n  use Application\n\n  @impl Application\n  def start(_type, _args) do\n    OpentelemetryEcto.setup([:template, :repo])\n    OpentelemetryOban.setup(trace: [:jobs])\n    OpentelemetryFinch.setup()\n    OpentelemetryPhoenix.setup()\n    OpentelemetryLiveView.setup()\n\n    children = [\n      {ConfigCat, configcat_config()},\n      {Cluster.Supervisor,\n       [\n         Application.fetch_env!(:libcluster, :topologies),\n         [name: Template.ClusterSupervisor]\n       ]},\n      {Phoenix.PubSub, name: Template.PubSub},\n      {Finch, name: Template.Finch},\n      Template.Repo,\n      {Oban, Application.fetch_env!(:template, Oban)},\n      Template.Web.Endpoint\n    ]\n\n    opts = [strategy: :one_for_one, name: Template.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\n\n  @impl Application\n  def config_change(changed, _new, removed) do\n    Template.Web.Endpoint.config_change(changed, removed)\n    :ok\n  end\n\n  defp configcat_config do\n    config = Application.fetch_env!(:template, ConfigCat)\n\n    local_datasource =\n      ConfigCat.LocalMapDataSource.new(config[:flag_overrides], config[:flag_override_strategy])\n\n    Keyword.put(config, :flag_overrides, local_datasource)\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"lib/template/auth/auth.ex","source":"defmodule Template.Auth do\n  @moduledoc \"\"\"\n  Aggregate for authentication and authorization.\n\n  Login and signup are handled by using external OAuth providers. At the moment, these are Google\n  and GitHub.\n  For session persistence, tokens are used.\n\n  The default implementation lives in `Template.Auth.Implementation`.\n  \"\"\"\n\n  use Boundary, deps: [Template.Repo], exports: [User], top_level?: true\n\n  use Knigge,\n    otp_app: :template,\n    default: Template.Auth.Impl\n\n  alias Template.Auth.Token\n  alias Template.Auth.User\n\n  @doc \"\"\"\n  Fetches a user with OAuth provider and external UID.\n\n  Returns `nil` if no user is found.\n  \"\"\"\n  @callback get_user_with_oauth(provider :: String.t(), uid :: String.t()) :: User.t() | nil\n\n  @doc \"\"\"\n  Fetches a user with a session token.\n\n  Returns `nil` if the token does not exist or is expired.\n  \"\"\"\n  @callback get_user_with_token(token :: binary()) :: User.t() | nil\n\n  @doc \"\"\"\n  Creates a new user.\n  \"\"\"\n  @callback create_user(\n              provider :: String.t(),\n              uid :: String.t(),\n              email :: String.t(),\n              name :: String.t(),\n              image_url :: String.t() | nil\n            ) ::\n              {:ok, User.t()} | {:error, Ecto.Changeset.t()}\n\n  @doc \"\"\"\n  Creates a new session token for a user.\n  \"\"\"\n  @callback create_token!(user_id :: integer()) :: Token.t()\n\n  @doc \"\"\"\n  Deletes a session token.\n  \"\"\"\n  @callback delete_token(token :: binary()) :: :ok\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,6,null,null,null,null,null,3,null,null,null,null,null,2,null,null,null,null],"name":"lib/template/auth/impl.ex","source":"defmodule Template.Auth.Impl do\n  @moduledoc \"\"\"\n  The default implementation of `Template.Auth`.\n  \"\"\"\n\n  @behaviour Template.Auth\n\n  alias Template.Repo\n  alias Template.Auth.Token\n  alias Template.Auth.User\n\n  @impl Template.Auth\n  def get_user_with_oauth(provider, uid) do\n    User.with_oauth_query(provider, uid)\n    |> Repo.one()\n  end\n\n  @impl Template.Auth\n  def get_user_with_token(token) do\n    Token.user_with_token_query(token)\n    |> Repo.one()\n  end\n\n  @impl Template.Auth\n  def create_user(provider, uid, email, name, image_url) do\n    User.changeset(%{\n      provider: provider,\n      uid: uid,\n      email: email,\n      name: name,\n      image_url: image_url\n    })\n    |> Repo.insert()\n  end\n\n  @impl Template.Auth\n  def create_token!(user_id) do\n    Token.build(user_id)\n    |> Repo.insert!()\n  end\n\n  @impl Template.Auth\n  def delete_token(token) do\n    Token.with_token_query(token)\n    |> Repo.delete_all()\n\n    :ok\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36,null,null,null,null,null,null,null,null,null,null,null,null,33,null,1,null,null,null,null,null,null,null,null,3,null,3,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null],"name":"lib/template/auth/token.ex","source":"defmodule Template.Auth.Token do\n  @moduledoc \"\"\"\n  A session token.\n  \"\"\"\n\n  use Ecto.Schema\n\n  import Ecto.Query\n\n  alias Template.Auth.User\n\n  @token_size 32\n  @token_validity_in_days 7\n\n  @schema_prefix \"auth\"\n  @timestamps_opts [type: :utc_datetime]\n  schema \"tokens\" do\n    field :token, :binary\n    belongs_to :user, Template.Auth.User\n    timestamps(updated_at: false)\n  end\n\n  @type t :: %__MODULE__{\n          id: integer(),\n          token: binary(),\n          user: User.t() | Ecto.Association.NotLoaded.t()\n        }\n\n  @doc false\n  def token_size, do: @token_size\n  @doc false\n  def token_validity_in_days, do: @token_validity_in_days\n\n  @doc \"\"\"\n  Builds a session token.\n\n  Generates a random token with length `@token_size` and associates it with the given user.\n  \"\"\"\n  @spec build(integer()) :: %__MODULE__{}\n  def build(user_id) do\n    token = :crypto.strong_rand_bytes(@token_size)\n\n    %__MODULE__{token: token, user_id: user_id}\n  end\n\n  @doc \"\"\"\n  Builds a query for fetching a token with the given token string.\n  \"\"\"\n  @spec with_token_query(binary()) :: Ecto.Query.t()\n  def with_token_query(token) do\n    from t in __MODULE__,\n      where: t.token == ^token\n  end\n\n  @doc \"\"\"\n  Builds a query for fetching a user with the given token string.\n\n  Only returns a user if the token has not expired, i.e. it has been created within the last\n  `@session_validity_in_days` days.\n  \"\"\"\n  def user_with_token_query(token) do\n    from t in __MODULE__,\n      where: t.token == ^token,\n      where: t.inserted_at >= ago(@token_validity_in_days, \"day\"),\n      join: u in assoc(t, :user),\n      select: u\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,50,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null],"name":"lib/template/auth/user.ex","source":"defmodule Template.Auth.User do\n  @moduledoc \"\"\"\n  Model for a user.\n\n  Since we are exclusively using OAuth, this is a dumb copy of whatever information the external\n  provider is giving us. There won't be any username/email and password authentication, allowing\n  us a great deal of simplification.\n\n  As of right now, a user model is never updated, even when parameters change on the side of the\n  OAuth provider. This should be strongly reconsidered in the future, since, for example, email\n  address changes can result in deliverability being broken.\n  \"\"\"\n\n  use Ecto.Schema\n\n  import Ecto.Changeset\n  import Ecto.Query\n\n  alias Template.Auth.User\n\n  @schema_prefix \"auth\"\n  @timestamps_opts [type: :utc_datetime]\n  schema \"users\" do\n    field :provider, :string\n    field :uid, :string\n    field :email, :string\n    field :name, :string\n    field :image_url, :string\n    field :role, Ecto.Enum, values: [:user, :admin], default: :user\n    timestamps()\n  end\n\n  @type roles :: :user | :admin\n\n  @type t :: %User{\n          id: integer(),\n          provider: String.t(),\n          uid: String.t(),\n          email: String.t(),\n          name: String.t(),\n          image_url: String.t() | nil,\n          role: roles()\n        }\n\n  @doc \"\"\"\n  Builds a changeset for a user.\n  \"\"\"\n  @spec changeset(%User{}, map()) :: Ecto.Changeset.t()\n  def changeset(%User{} = user \\\\ %User{}, attrs) do\n    user\n    |> cast(attrs, [:provider, :uid, :email, :name, :image_url, :role])\n    |> validate_required([:provider, :uid, :email, :name])\n  end\n\n  @doc \"\"\"\n  Builds a query for fetching a user with OAuth provider and external UID.\n  \"\"\"\n  @spec with_oauth_query(String.t(), String.t()) :: Ecto.Query.t()\n  def with_oauth_query(provider, uid) do\n    from(u in User,\n      where: u.provider == ^provider,\n      where: u.uid == ^uid\n    )\n  end\n\n  @doc \"Converts a user to a ConfigCat user.\"\n  @spec to_configcat_user(User.t()) :: ConfigCat.User.t()\n  def to_configcat_user(%User{} = user) do\n    %ConfigCat.User{\n      identifier: user.id,\n      email: user.email,\n      custom: %{role: user.role}\n    }\n  end\nend"},{"coverage":[null,null,null,null,null,null],"name":"lib/template/mailer.ex","source":"defmodule Template.Mailer do\n  @moduledoc false\n\n  use Boundary, deps: [], exports: [], top_level?: true\n  use Swoosh.Mailer, otp_app: :template\nend"},{"coverage":[null,null,null,null,null,null,0,null,0,0,null,null,null,null,0,null,0,null,null,null,0,null,null,null,0,null,null],"name":"lib/template/release.ex","source":"defmodule Template.Release do\n  @moduledoc false\n\n  use Boundary, deps: [], exports: [], top_level?: true\n\n  def migrate do\n    load_app()\n\n    for repo <- repos() do\n      {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :up, all: true))\n    end\n  end\n\n  def rollback(repo, version) do\n    load_app()\n\n    {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :down, to: version))\n  end\n\n  defp repos do\n    Application.fetch_env!(:template, :ecto_repos)\n  end\n\n  defp load_app do\n    Application.load(:template)\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null],"name":"lib/template/repo.ex","source":"defmodule Template.Repo do\n  @moduledoc false\n\n  use Boundary, top_level?: true\n\n  use Ecto.Repo,\n    otp_app: :template,\n    adapter: Ecto.Adapters.Postgres\n\n  use Paginator\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,null,null,null],"name":"lib/template/web.ex","source":"defmodule Template.Web do\n  @moduledoc \"\"\"\n  Entrypoint for implementing the web interface to the service.\n\n  Provides a `__using__/1` macro accepting one parameter specifying what the module is.\n  \"\"\"\n\n  use Boundary, deps: [Template.Auth], exports: [Endpoint], top_level?: true\n\n  defmacro __using__(which) when is_atom(which) do\n    apply(__MODULE__, which, [])\n  end\n\n  def controller do\n    quote do\n      use Phoenix.Controller,\n        namespace: Template.Web,\n        formats: [:html, :json],\n        layouts: [html: Template.Web.Layouts]\n\n      import Plug.Conn\n\n      unquote(verified_routes())\n    end\n  end\n\n  def component do\n    quote do\n      use Phoenix.Component\n\n      import Phoenix.Controller,\n        only: [get_csrf_token: 0, view_module: 1, view_template: 1]\n\n      unquote(html_helpers())\n    end\n  end\n\n  def live_view do\n    quote do\n      use Phoenix.LiveView,\n        layout: {Template.Web.Layouts, :app},\n        container: {:div, class: \"h-full\"}\n\n      unquote(html_helpers())\n    end\n  end\n\n  def live_component do\n    quote do\n      use Phoenix.LiveComponent\n\n      unquote(html_helpers())\n    end\n  end\n\n  def verified_routes do\n    quote do\n      use Phoenix.VerifiedRoutes,\n        endpoint: Template.Web.Endpoint,\n        router: Template.Web.Router,\n        statics: Template.Web.static_paths()\n    end\n  end\n\n  def static_paths, do: ~w(assets fonts images favicon.ico robots.txt)\n\n  defp html_helpers do\n    quote do\n      import Phoenix.HTML\n      import Template.Web.Gettext\n\n      alias Phoenix.LiveView.JS\n\n      unquote(verified_routes())\n    end\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,null,8,null,null,13,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,5,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,null,5,5,null,5,1,null,null,null,null,null,5,null,null,null,null,null,10,null,null,null,5,null,null],"name":"lib/template/web/auth.ex","source":"defmodule Template.Web.Auth do\n  @moduledoc \"\"\"\n  Authentication and authorization functionality for the web service.\n\n  This module includes functions to fetch the current user from a session, redirect users based on their\n  authentication status, manage session tokens, start and end user sessions, and handle mount actions\n  for authenticated LiveView components.\n\n  The authentication process relies on session tokens stored in cookies.\n  \"\"\"\n\n  use Template.Web, :verified_routes\n\n  import Plug.Conn\n  import Phoenix.Controller\n\n  alias Template.Auth\n\n  @session_cookie \"session\"\n  @max_age 60 * 60 * 24 * 7\n  @session_options [sign: true, max_age: @max_age, same_site: \"Lax\"]\n\n  @doc false\n  def session_cookie, do: @session_cookie\n\n  @doc \"Path to redirect to when an authenticated session exists.\"\n  def signed_in_path, do: ~p\"/app\"\n\n  @doc \"Path to redirect to when unauthenticated.\"\n  def signed_out_path, do: ~p\"/\"\n\n  @doc \"Adds a session token to the current session.\"\n  def put_token_in_session(conn, token) do\n    conn\n    |> put_session(:session_token, token)\n    |> put_session(:live_socket_id, \"session_token:#{Base.url_encode64(token)}\")\n  end\n\n  @doc \"\"\"\n  Creates a new authenticated session.\n\n  Creates and persists a session token, which is then added to the browser session and stored as a\n  session cookie. Afterwards, redirects to `signed_in_path/0`.\n  \"\"\"\n  def start_session(conn, user) do\n    token = Auth.create_token!(user.id).token\n\n    conn\n    |> renew_session()\n    |> put_token_in_session(token)\n    |> write_session_cookie(token)\n    |> redirect(to: signed_in_path())\n  end\n\n  @doc \"\"\"\n  Ends an authenticated session, if one exists.\n\n  Deletes the session token from the business layer, broadcasts a disconnect event to all\n  connected LiveViews so that existing persistent connections are closed, preventing the\n  user from inadvertently staying authenticated.\n  \"\"\"\n  def end_session(conn) do\n    session_token = get_session(conn, :session_token)\n    session_token && Auth.delete_token(session_token)\n\n    if live_socket_id = get_session(conn, :live_socket_id) do\n      Template.Web.Endpoint.broadcast(live_socket_id, \"disconnect\", %{})\n    end\n\n    conn\n    |> renew_session()\n    |> delete_resp_cookie(@session_cookie)\n    |> redirect(to: signed_out_path())\n  end\n\n  defp renew_session(conn) do\n    conn\n    |> configure_session(renew: true)\n    |> clear_session()\n  end\n\n  defp write_session_cookie(conn, token) do\n    put_resp_cookie(conn, @session_cookie, token, @session_options)\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,8,0,null],"name":"lib/template/web/components.ex","source":"defmodule Template.Web.Components do\n  @moduledoc \"\"\"\n  Component aggregator.\n\n  This module serves as a single entrypoint for commonly used components.\n  \"\"\"\n\n  alias Template.Web.Components\n\n  defdelegate icon(assigns), to: Components.Icon\n  defdelegate card(assigns), to: Components.Card\nend"},{"coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null],"name":"lib/template/web/components/card.ex","source":"defmodule Template.Web.Components.Card do\n  @moduledoc \"\"\"\n  Card component.\n  \"\"\"\n\n  use Template.Web, :component\n\n  def card(assigns) do\n    ~H\"\"\"\n    Sample component\n    \"\"\"\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,8,8,null,null,null],"name":"lib/template/web/components/icon.ex","source":"defmodule Template.Web.Components.Icon do\n  @moduledoc false\n\n  use Template.Web, :component\n\n  attr :name, :string, required: true\n  attr :class, :string, default: \"\"\n\n  def icon(%{name: \"phosphor-\" <> _} = assigns) do\n    ~H\"\"\"\n    <span class={[@name, @class]} />\n    \"\"\"\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,0,0,null,null,null,null],"name":"lib/template/web/components/keyboard.ex","source":"defmodule Template.Web.Components.KeyboardHandler do\n  @moduledoc \"\"\"\n  Component for handling keyboard events.\n  \"\"\"\n\n  use Template.Web, :live_component\n\n  attr :keydown_enabled, :boolean, default: false\n  attr :keyup_enabled, :boolean, default: false\n\n  @impl Phoenix.LiveComponent\n  def render(assigns) do\n    ~H\"\"\"\n    <div\n      id={\"#{@id}\"}\n      phx-hook=\"Keyboard\"\n      data-keydown-enabled={@keydown_enabled}\n      data-keyup-enabled={@keyup_enabled}\n      data-target={@myself}\n      aria-hidden=\"true\"\n    >\n    </div>\n    \"\"\"\n  end\n\n  @impl Phoenix.LiveComponent\n  def handle_event(\"keydown\", %{\"key\" => key}, socket) do\n    send(self(), {:keydown, key})\n\n    {:noreply, socket}\n  end\n\n  @impl Phoenix.LiveComponent\n  def handle_event(\"keyup\", %{\"key\" => key}, socket) do\n    send(self(), {:keyup, key})\n\n    {:noreply, socket}\n  end\nend"},{"coverage":[null,null,null,null,null,null,null],"name":"lib/template/web/components/layouts.ex","source":"defmodule Template.Web.Layouts do\n  @moduledoc false\n\n  use Template.Web, :component\n\n  embed_templates \"layouts/*\"\nend"},{"coverage":[null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"lib/template/web/components/sidebar.ex","source":"defmodule Template.Web.Components.Sidebar do\n  use Template.Web, :component\n\n  def render(assigns) do\n    ~H\"\"\"\n    <div class=\"hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col\">\n      <div class=\"flex grow flex-col gap-y-5 overflow-y-auto border-r border-gray-200 bg-white px-6\">\n        <div class=\"flex h-16 shrink-0 items-center\">\n          <img\n            class=\"h-8 w-auto\"\n            src=\"https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600\"\n            alt=\"Your Company\"\n          />\n        </div>\n        <nav class=\"flex flex-1 flex-col\">\n          <ul role=\"list\" class=\"flex flex-1 flex-col gap-y-7\">\n            <li>\n              <ul role=\"list\" class=\"-mx-2 space-y-1\">\n                <li>\n                  <!-- Current: \"bg-gray-50\", Default: \"hover:bg-gray-50\" -->\n                  <a\n                    href=\"#\"\n                    class=\"bg-gray-50 block rounded-md py-2 pr-2 pl-10 text-sm leading-6 font-semibold text-gray-700\"\n                  >\n                    Dashboard\n                  </a>\n                </li>\n\n                <li>\n                  <div>\n                    <button\n                      type=\"button\"\n                      class=\"hover:bg-gray-50 flex items-center w-full text-left rounded-md p-2 gap-x-3 text-sm leading-6 font-semibold text-gray-700\"\n                      aria-controls=\"sub-menu-1\"\n                      aria-expanded=\"false\"\n                    >\n                      <!-- Expanded: \"rotate-90 text-gray-500\", Collapsed: \"text-gray-400\" -->\n                      <svg\n                        class=\"text-gray-400 h-5 w-5 shrink-0\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        aria-hidden=\"true\"\n                      >\n                        <path\n                          fill-rule=\"evenodd\"\n                          d=\"M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z\"\n                          clip-rule=\"evenodd\"\n                        />\n                      </svg>\n                      Teams\n                    </button>\n                    <!-- Expandable link section, show/hide based on state. -->\n                    <ul class=\"mt-1 px-2\" id=\"sub-menu-1\">\n                      <li>\n                        <a\n                          href=\"#\"\n                          class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-9 text-sm leading-6 text-gray-700\"\n                        >\n                          Engineering\n                        </a>\n                      </li>\n\n                      <li>\n                        <a\n                          href=\"#\"\n                          class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-9 text-sm leading-6 text-gray-700\"\n                        >\n                          Human Resources\n                        </a>\n                      </li>\n\n                      <li>\n                        <a\n                          href=\"#\"\n                          class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-9 text-sm leading-6 text-gray-700\"\n                        >\n                          Customer Success\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                </li>\n\n                <li>\n                  <div>\n                    <button\n                      type=\"button\"\n                      class=\"hover:bg-gray-50 flex items-center w-full text-left rounded-md p-2 gap-x-3 text-sm leading-6 font-semibold text-gray-700\"\n                      aria-controls=\"sub-menu-2\"\n                      aria-expanded=\"false\"\n                    >\n                      <!-- Expanded: \"rotate-90 text-gray-500\", Collapsed: \"text-gray-400\" -->\n                      <svg\n                        class=\"text-gray-400 h-5 w-5 shrink-0\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        aria-hidden=\"true\"\n                      >\n                        <path\n                          fill-rule=\"evenodd\"\n                          d=\"M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z\"\n                          clip-rule=\"evenodd\"\n                        />\n                      </svg>\n                      Projects\n                    </button>\n                    <!-- Expandable link section, show/hide based on state. -->\n                    <ul class=\"mt-1 px-2\" id=\"sub-menu-2\">\n                      <li>\n                        <a\n                          href=\"#\"\n                          class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-9 text-sm leading-6 text-gray-700\"\n                        >\n                          GraphQL API\n                        </a>\n                      </li>\n\n                      <li>\n                        <a\n                          href=\"#\"\n                          class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-9 text-sm leading-6 text-gray-700\"\n                        >\n                          iOS App\n                        </a>\n                      </li>\n\n                      <li>\n                        <a\n                          href=\"#\"\n                          class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-9 text-sm leading-6 text-gray-700\"\n                        >\n                          Android App\n                        </a>\n                      </li>\n\n                      <li>\n                        <a\n                          href=\"#\"\n                          class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-9 text-sm leading-6 text-gray-700\"\n                        >\n                          New Customer Portal\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#\"\n                    class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-10 text-sm leading-6 font-semibold text-gray-700\"\n                  >\n                    Calendar\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#\"\n                    class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-10 text-sm leading-6 font-semibold text-gray-700\"\n                  >\n                    Documents\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#\"\n                    class=\"hover:bg-gray-50 block rounded-md py-2 pr-2 pl-10 text-sm leading-6 font-semibold text-gray-700\"\n                  >\n                    Reports\n                  </a>\n                </li>\n              </ul>\n            </li>\n            <li class=\"-mx-6 mt-auto\">\n              <a\n                href=\"#\"\n                class=\"flex items-center gap-x-4 px-6 py-3 text-sm font-semibold leading-6 text-gray-900 hover:bg-gray-50\"\n              >\n                <img\n                  class=\"h-8 w-8 rounded-full bg-gray-50\"\n                  src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"\n                  alt=\"\"\n                />\n                <span class=\"sr-only\">Your profile</span>\n                <span aria-hidden=\"true\">Tom Cook</span>\n              </a>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n    \"\"\"\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,0,0,null,0,null,0,null,0,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,0,null,null,0,null,null,null],"name":"lib/template/web/controllers/auth_controller.ex","source":"defmodule Template.Web.Controllers.AuthController do\n  @moduledoc \"\"\"\n  Web authentication controller.\n\n  Starts OAuth requests, handles callbacks and manages session tokens.\n  \"\"\"\n\n  use Template.Web, :controller\n\n  alias Template.Auth\n\n  plug Ueberauth\n\n  @doc \"\"\"\n  Starts an OAuth request.\n\n  The general handling is provided by Ueberauth by calling `plug Ueberauth`.\n  Ueberauth currently does not gracefully handle unknown providers, so we are adding an extra\n  function clause here that matches on any provider - if the requested provider wasn't matched by\n  Ueberauth before, an error is returned.\n  \"\"\"\n  def request(conn, _params) do\n    conn\n    |> put_flash(:login_error, true)\n    |> redirect(to: Template.Web.Auth.signed_out_path())\n  end\n\n  @doc \"\"\"\n  Handles an OAuth callback.\n\n  Outcome of the OAuth request is handled by Ueberauth. The two function clauses of this handler\n  are matching on Ueberauth's results and whether `ueberauth_failure` or `ueberauth_auth` is\n  present in the connection.\n  \"\"\"\n  def callback(conn, params)\n\n  def callback(%{assigns: %{ueberauth_failure: _failure}} = conn, _params) do\n    conn\n    |> put_flash(:login_error, true)\n    |> redirect(to: Template.Web.Auth.signed_out_path())\n  end\n\n  def callback(%{assigns: %{ueberauth_auth: auth}} = conn, _params) do\n    provider = to_string(auth.provider)\n    uid = to_string(auth.uid)\n\n    user = get_or_create_user(provider, uid, auth.info.email, auth.info.name, auth.info.image)\n\n    case user do\n      {:ok, user} ->\n        Template.Web.Auth.start_session(conn, user)\n\n      {:error, _error} ->\n        conn\n        |> put_flash(:login_error, true)\n        |> redirect(to: Template.Web.Auth.signed_out_path())\n    end\n  end\n\n  @doc \"\"\"\n  Ends an authenticated session.\n  \"\"\"\n  def logout(conn, _params) do\n    Template.Web.Auth.end_session(conn)\n  end\n\n  defp get_or_create_user(provider, uid, email, name, image_url) do\n    if user = Auth.get_user_with_oauth(provider, uid) do\n      {:ok, user}\n    else\n      Auth.create_user(provider, uid, email, name, image_url)\n    end\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"lib/template/web/endpoint.ex","source":"defmodule Template.Web.Endpoint do\n  @moduledoc false\n\n  use Phoenix.Endpoint, otp_app: :template\n\n  @session_options [\n    store: :cookie,\n    key: \"_session\",\n    signing_salt: \"S8DoleIF\",\n    same_site: \"Lax\"\n  ]\n\n  socket \"/live\", Phoenix.LiveView.Socket,\n    websocket: [\n      connect_info: [\n        session: @session_options\n      ]\n    ]\n\n  plug Plug.Static,\n    at: \"/\",\n    from: :template,\n    gzip: true,\n    only: Template.Web.static_paths()\n\n  if code_reloading? do\n    socket \"/phoenix/live_reload/socket\", Phoenix.LiveReloader.Socket\n    plug Phoenix.LiveReloader\n    plug Phoenix.CodeReloader\n  end\n\n  plug RemoteIp, headers: [\"cf-connecting-ip\", \"x-forwarded-for\"]\n  plug Plug.RequestId\n  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]\n\n  plug Plug.Parsers,\n    parsers: [:urlencoded, :multipart, :json],\n    pass: [\"*/*\"],\n    json_decoder: Jason\n\n  plug Plug.MethodOverride\n  plug Plug.Head\n  plug Template.Web.Plugs.ContentSecurityPolicy\n  plug Template.Web.Plugs.CORS\n  plug Plug.Session, @session_options\n  plug Template.Web.Router\nend"},{"coverage":[null,null,null,null,null,null,0,null,null],"name":"lib/template/web/error.ex","source":"defmodule Template.Web.ErrorHTML do\n  @moduledoc false\n\n  use Template.Web, :component\n\n  def render(template, _assigns) do\n    Phoenix.Controller.status_message_from_template(template)\n  end\nend"},{"coverage":[null,null,null,null,null],"name":"lib/template/web/gettext.ex","source":"defmodule Template.Web.Gettext do\n  @moduledoc false\n\n  use Gettext, otp_app: :template\nend"},{"coverage":[null,null,null,null,null,null,0,0,null,null,null],"name":"lib/template/web/live/admin/users.ex","source":"defmodule Template.Web.Live.Admin.Users do\n  use Template.Web, :live_view\n\n  alias Template.Web.Components.Sidebar\n\n  def render(assigns) do\n    ~H\"\"\"\n    <Sidebar.render />\n    \"\"\"\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,null,null,null,null,2,null,null,null,null,null,null,null,2,1,null,null,null,null,null,null,null,null,6,null,3,3,null,null,null,3,null,null,null],"name":"lib/template/web/live/auth.ex","source":"defmodule Template.Web.Live.Auth do\n  import Template.Web.Auth, only: [signed_out_path: 0]\n\n  alias Template.Auth.User\n\n  @doc \"\"\"\n  Mount actions for LiveViews and live sessions that interact with authentication.\n\n  ## `:mount_user`\n\n  Mounts the session user from the initial connection as `assigns.user`.\n\n  ## `:require_session`\n\n  If no valid authenticated session exists, halts the mount and redirects to `signed_out_path/0`.\n  Most likely to be used together with `:mount_user`.\n\n  ## `:require_admin`\n\n  If no valid authenticated session exists, or the authenticated user is not an admin, halts the\n  mount and redirects to `signed_out_path/0`. Most likely to be used together with `:mount_user`.\n\n  ## Usage\n      # Router\n      live_session :authenticated,\n      on_mount: [\n        {Template.Web.Live.Auth, :mount_user},\n        {Template.Web.Live.Auth, :require_session}\n      do\n        scope \"/\", Template.Web do\n          pipe_through :browser\n\n          live \"/profile\", UserLive.Profile, :index\n        end\n      end\n  \"\"\"\n  def on_mount(:mount_user, _params, session, socket) do\n    socket = mount_user(session, socket)\n\n    {:cont, socket}\n  end\n\n  def on_mount(:require_session, _params, _session, socket) do\n    if Map.get(socket.assigns, :user) do\n      {:cont, socket}\n    else\n      {:halt, Phoenix.LiveView.redirect(socket, to: signed_out_path())}\n    end\n  end\n\n  def on_mount(:require_admin, _params, _session, socket) do\n    with %User{} = user <- Map.get(socket.assigns, :user),\n         :admin <- user.role do\n      {:cont, socket}\n    else\n      _ ->\n        {:halt, Phoenix.LiveView.redirect(socket, to: signed_out_path())}\n    end\n  end\n\n  defp mount_user(session, socket) do\n    case session do\n      %{\"session_token\" => session_token} ->\n        Phoenix.Component.assign_new(socket, :user, fn ->\n          Template.Auth.get_user_with_token(session_token)\n        end)\n\n      %{} ->\n        Phoenix.Component.assign_new(socket, :user, fn -> nil end)\n    end\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,null,null,null,null,null,2,2,null,null,2,null,null,2,null,null,null,null,null,2,null,2,0,null,null,null,0,null,null,2,null,2,null,null,null,2,2,null,null,null,null,2,null,null,2,2,null,null,null,null,2,null,null,null,null,null,null,null,null,null,2,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,2,2,null,null,null,null,null,2,0,null,null,null,0,null,null,null,null,null,null,2,2,null,null,null,null,2,null,null,null,null,2,2,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,4,null,null,null,null,null],"name":"lib/template/web/live/landing.ex","source":"defmodule Template.Web.Live.Landing do\n  use Template.Web, :live_view\n\n  import Template.Web.Components\n\n  on_mount {Template.Web.Live.Auth, :mount_user}\n\n  @navigation_items [\n    %{label: \"Features\", href: \"/features\"},\n    %{label: \"About\", href: \"/about\"}\n  ]\n\n  @impl Phoenix.LiveView\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, navigation_items: @navigation_items)}\n  end\n\n  @impl Phoenix.LiveView\n  def render(assigns) do\n    ~H\"\"\"\n    <div class=\"h-full bg-vellum\">\n      <header class=\"absolute inset-x-0 top-0 z-10\">\n        <nav class=\"flex items-center justify-between p-6 lg:px-8\" aria-label=\"Global\">\n          <div class=\"flex lg:flex-1\">\n            <a href=\"#\" class=\"-m-1.5 p-1.5\">\n              <span class=\"sr-only\">Template</span>\n              <img\n                class=\"h-8 w-auto\"\n                src=\"https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600\"\n                alt=\"\"\n              />\n            </a>\n          </div>\n\n          <.login user={@user} />\n          <div class=\"flex lg:hidden\">\n            <button\n              type=\"button\"\n              id=\"sidebar-button\"\n              phx-click={open_sidebar()}\n              class=\"-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700\"\n            >\n              <span class=\"sr-only\"><%= gettext(\"Open menu\") %></span>\n              <Heroicons.bars_3 class=\"h-6 w-6\" />\n            </button>\n          </div>\n          <.sidebar user={@user} />\n        </nav>\n      </header>\n      <.main />\n    </div>\n    \"\"\"\n  end\n\n  defp login(assigns) do\n    ~H\"\"\"\n    <div class=\"hidden lg:flex lg:flex-1 lg:justify-end\">\n      <%= if @user do %>\n        <.link\n          href={Template.Web.Auth.signed_in_path()}\n          class=\"rounded-md border-moss border-2 bg-white px-3 py-1.5 text-sm font-semibold text-moss shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n        >\n          <%= gettext(\"Dashboard\") %>\n        </.link>\n      <% else %>\n        <%= if ConfigCat.get_value(\"enableLogin\", false) do %>\n          <span class=\"py-1.5 text-lg font-semibold leading-7 text-moss\">\n            <%= gettext(\"Sign in with\") %>\n          </span>\n\n          <div class=\"flex space-x-2 ml-5\">\n            <.link\n              href={~p\"/auth/google\"}\n              id=\"sign-in-google\"\n              class=\"flex justify-center rounded-md bg-white px-3 py-2 text-moss border-2 border-moss shadow-sm focus:outline-offset-0\"\n            >\n              <span class=\"sr-only\">Google</span>\n              <.icon name=\"phosphor-google-logo-bold\" class=\"h-5 w-5\" />\n            </.link>\n\n            <.link\n              href={~p\"/auth/github\"}\n              id=\"sign-in-github\"\n              class=\"flex justify-center rounded-md bg-white px-3 py-2 text-moss border-2 border-moss shadow-sm focus:outline-offset-0\"\n            >\n              <span class=\"sr-only\">GitHub</span>\n              <.icon name=\"phosphor-github-logo-bold\" class=\"h-5 w-5\" />\n            </.link>\n          </div>\n        <% end %>\n      <% end %>\n    </div>\n    \"\"\"\n  end\n\n  defp sidebar(assigns) do\n    ~H\"\"\"\n    <div id=\"sidebar\" class=\"hidden lg:hidden\" role=\"dialog\" aria-modal=\"true\">\n      <div id=\"sidebar-overlay\" class=\"fixed inset-0 z-50 bg-gray-50/90\" aria-hidden=\"true\"></div>\n      <div\n        id=\"sidebar-content\"\n        phx-click-away={close_sidebar()}\n        class=\"fixed inset-y-0 right-0 z-50 w-full overflow-y-auto bg-blush px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10\"\n      >\n        <div class=\"flex items-center justify-between\">\n          <a href=\"#\" class=\"-m-1.5 p-1.5\">\n            <span class=\"sr-only\">Template</span>\n            <img\n              class=\"h-8 w-auto\"\n              src=\"https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600\"\n              alt=\"\"\n            />\n          </a>\n          <button\n            type=\"button\"\n            phx-click={close_sidebar()}\n            class=\"-m-2.5 rounded-md p-2.5 text-gray-700\"\n          >\n            <span class=\"sr-only\"><%= gettext(\"Close menu\") %></span>\n            <Heroicons.x_mark class=\"h-6 w-6\" />\n          </button>\n        </div>\n        <div class=\"mt-6 flow-root\">\n          <div class=\"-my-6 divide-y divide-gray-500/10\">\n            <div>\n              <%= if @user do %>\n                <.link\n                  href={Template.Web.Auth.signed_in_path()}\n                  class=\"rounded-full bg-indigo-600 px-3 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n                >\n                  <%= gettext(\"Dashboard\") %>\n                </.link>\n              <% else %>\n                <div id=\"sign-in-sidebar\">\n                  <p class=\"mt-6 text-lg font-semibold leading-6 text-gray-900\">Sign in with</p>\n                  <div class=\"mt-2 grid grid-cols-3 gap-3\">\n                    <div>\n                      <.link\n                        href={~p\"/auth/google\"}\n                        id=\"sign-in-sidebar-google\"\n                        class=\"flex justify-center rounded-md bg-white px-3 py-2 text-moss border-2 border-moss shadow-sm focus:outline-offset-0\"\n                      >\n                        <span class=\"sr-only\">Sign in with Google</span>\n                        <.icon name=\"phosphor-google-logo-bold\" class=\"h-6 w-6\" />\n                      </.link>\n                    </div>\n\n                    <div>\n                      <.link\n                        href={~p\"/auth/github\"}\n                        id=\"sign-in-sidebar-github\"\n                        class=\"flex justify-center rounded-md bg-white px-3 py-2 text-moss border-2 border-moss shadow-sm focus:outline-offset-0\"\n                      >\n                        <span class=\"sr-only\">Sign in with GitHub</span>\n                        <.icon name=\"phosphor-github-logo-bold\" class=\"h-6 w-6\" />\n                      </.link>\n                    </div>\n                  </div>\n                </div>\n              <% end %>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \"\"\"\n  end\n\n  defp main(assigns) do\n    ~H\"\"\"\n    <div class=\"pt-20\">\n      <div class=\"py-48 sm:py-64 lg:pb-40\">\n        <div class=\"mx-auto max-w-2xl text-center\">\n          <h1 class=\"text-4xl font-bold tracking-tight text-moss sm:text-6xl\">\n            Products are more fun than landing pages.\n          </h1>\n          <p class=\"mt-6 text-lg leading-8 text-moss/80\">\n            ... at least for now.\n          </p>\n          <p class=\"mt-6 text-sm leading-8 text-moss/60\">\n            Version <%= to_string(Application.spec(:template, :vsn)) %>\n          </p>\n        </div>\n      </div>\n    </div>\n    \"\"\"\n  end\n\n  defp open_sidebar(js \\\\ %JS{}) do\n    js\n    |> JS.remove_class(\"hidden\", to: \"#sidebar\")\n    |> JS.transition(\n      {\"transition ease-in-out duration-300 transform\", \"translate-x-full\", \"translate-x-0\"},\n      to: \"#sidebar-content\"\n    )\n  end\n\n  defp close_sidebar(js \\\\ %JS{}) do\n    js\n    |> JS.add_class(\"hidden\", to: \"#sidebar\")\n    |> JS.transition(\n      {\"transition ease-in-out duration-300 transform\", \"translate-x-0\", \"translate-x-full\"},\n      to: \"#sidebar-content\"\n    )\n  end\nend"},{"coverage":[null,null,null,null,null,null,0,0,0,null,null,null,0,0,null,null,null,null],"name":"lib/template/web/live/page.ex","source":"defmodule Template.Web.PageLive do\n  use Template.Web, :live_view\n\n  alias Template.Web.Components.KeyboardHandler\n\n  def render(assigns) do\n    ~H\"\"\"\n    <.live_component module={KeyboardHandler} id=\"keyboard-handler\" keydown_enabled=\"true\" /> Hello!\n    <.link href={~p\"/auth/session\"} method=\"delete\">Logout</.link>\n    \"\"\"\n  end\n\n  def handle_info({:keydown, key}, socket) do\n    IO.inspect(\"Keydown: #{key}\")\n\n    {:noreply, socket}\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,4,null,4,null,null,null,null,null,null,null,null,null,null,2,1,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,3,null,null,1,null,2,null,null,null,null,4,null,null,3,null,3,null,null,null,null,null,null,null],"name":"lib/template/web/plugs/auth.ex","source":"defmodule Template.Web.Plugs.Auth do\n  import Plug.Conn\n  import Phoenix.Controller\n  import Template.Web.Auth, only: [signed_in_path: 0, signed_out_path: 0, session_cookie: 0]\n\n  alias Template.Auth\n\n  @doc \"\"\"\n  Reads the session token from the browser session or cookies, whichever is available, and, if the\n  token is valid, assigns the corresponding user to the connection.\n\n  ## Usage\n      # Router\n      plug :fetch_user\n  \"\"\"\n  def fetch_user(conn, _opts) do\n    {session_token, conn} = ensure_session_token(conn)\n    user = session_token && Auth.get_user_with_token(session_token)\n\n    assign(conn, :user, user)\n  end\n\n  @doc \"\"\"\n  Redirects the connection to `signed_out_path/0` if no authenticated session exists.\n\n  ## Usage\n      # Router\n      plug :require_session\n  \"\"\"\n  def require_session(conn, _opts) do\n    if conn.assigns[:user] do\n      conn\n    else\n      conn\n      |> redirect(to: signed_out_path())\n      |> halt()\n    end\n  end\n\n  @doc \"\"\"\n  Redirects the connection to `signed_in_path/0` if an authenticated session exists.\n\n  ## Usage\n      # Router\n      plug :redirect_if_authenticated\n  \"\"\"\n  def redirect_if_authenticated(conn, _opts) do\n    if conn.assigns[:user] do\n      conn\n      |> redirect(to: signed_in_path())\n      |> halt()\n    else\n      conn\n    end\n  end\n\n  defp ensure_session_token(conn) do\n    if token = get_session(conn, :session_token) do\n      {token, conn}\n    else\n      conn = fetch_cookies(conn, signed: [session_cookie()])\n\n      if token = conn.cookies[session_cookie()] do\n        {token, Template.Web.Auth.put_token_in_session(conn, token)}\n      else\n        {nil, conn}\n      end\n    end\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,1,null,null,null,10,10,10,10,10,10,10,10,null,null,10,null,null,10,10,10,10,10,10,10,null],"name":"lib/template/web/plugs/content_security_policy.ex","source":"defmodule Template.Web.Plugs.ContentSecurityPolicy do\n  @moduledoc \"\"\"\n  Sets the Content-Security-Policy header.\n  \"\"\"\n\n  @behaviour Plug\n\n  import Phoenix.Controller, only: [put_secure_browser_headers: 2]\n\n  @impl Plug\n  def init(opts), do: opts\n\n  @impl Plug\n  def call(conn, _) do\n    directives = [\n      \"default-src #{default_src_directive()}\",\n      \"style-src #{style_src_directive()}\",\n      \"font-src #{font_src_directive()}\",\n      \"script-src #{script_src_directive()}\",\n      \"img-src #{img_src_directive()}\",\n      \"frame-src #{frame_src_directive()}\",\n      \"connect-src #{connect_src_directive()}\"\n    ]\n\n    put_secure_browser_headers(conn, %{\"content-security-policy\" => Enum.join(directives, \"; \")})\n  end\n\n  defp default_src_directive, do: \"'none'\"\n  defp style_src_directive, do: \"'self' 'unsafe-inline' https://rsms.me\"\n  defp font_src_directive, do: \"'self' https://rsms.me\"\n  defp script_src_directive, do: \"'self'\"\n  defp img_src_directive, do: \"'self' data:\"\n  defp frame_src_directive, do: \"'self'\"\n  defp connect_src_directive, do: \"'self'\"\nend"},{"coverage":[null,null,null,null,null,null],"name":"lib/template/web/plugs/cors.ex","source":"defmodule Template.Web.Plugs.CORS do\n  @moduledoc false\n\n  use Corsica.Router,\n      Application.compile_env(:template, Corsica)\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,1,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,null,null],"name":"lib/template/web/router.ex","source":"defmodule Template.Web.Router do\n  @moduledoc false\n\n  use Phoenix.Router, helpers: false\n\n  import Plug.Conn\n  import Phoenix.Controller\n  import Phoenix.LiveView.Router\n  import Template.Web.Plugs.Auth\n\n  alias Controllers.AuthController\n\n  pipeline :browser do\n    plug :accepts, [\"html\"]\n    plug :fetch_session\n    plug :fetch_live_flash\n    plug :put_root_layout, {Template.Web.Layouts, :root}\n    plug :protect_from_forgery\n    plug :fetch_user\n  end\n\n  scope \"/\", Template.Web do\n    pipe_through :browser\n\n    live \"/\", Live.Landing, :index\n  end\n\n  scope \"/app\", Template.Web do\n    pipe_through :browser\n\n    live_session :app,\n      on_mount: [\n        {Template.Web.Live.Auth, :mount_user},\n        {Template.Web.Live.Auth, :require_session}\n      ] do\n      live \"/\", PageLive, :index\n    end\n  end\n\n  scope \"/admin\", Template.Web do\n    pipe_through :browser\n\n    live_session :admin,\n      on_mount: [\n        {Template.Web.Live.Auth, :mount_user},\n        {Template.Web.Live.Auth, :require_admin}\n      ] do\n      live \"/users\", Live.Admin.Users, :index\n    end\n  end\n\n  scope \"/auth\", Template.Web do\n    pipe_through [:browser, :redirect_if_authenticated]\n\n    get \"/:provider\", AuthController, :request\n  end\n\n  scope \"/auth\", Template.Web do\n    pipe_through :browser\n\n    get \"/:provider/callback\", AuthController, :callback\n    delete \"/session\", AuthController, :logout\n  end\n\n  if Application.compile_env(:template, :dev_routes) do\n    scope \"/dev\" do\n      pipe_through :browser\n\n      forward \"/mailbox\", Plug.Swoosh.MailboxPreview\n    end\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24,null,null,null],"name":"test/support/conn_case.ex","source":"defmodule Template.ConnCase do\n  @moduledoc \"\"\"\n  This module defines the test case to be used by\n  tests that require setting up a connection.\n\n  Such tests rely on `Phoenix.ConnTest` and also\n  import other functionality to make it easier\n  to build common data structures and query the data layer.\n\n  Finally, if the test case interacts with the database,\n  we enable the SQL sandbox, so changes done to the database\n  are reverted at the end of every test. If you are using\n  PostgreSQL, you can even run database tests asynchronously\n  by setting `use Template.Web.ConnCase, async: true`, although\n  this option is not recommended for other databases.\n  \"\"\"\n\n  use Boundary, deps: [Template.DataCase]\n  use ExUnit.CaseTemplate\n\n  using do\n    quote do\n      # The default endpoint for testing\n      @endpoint Template.Web.Endpoint\n\n      use Template.Web, :verified_routes\n\n      # Import conveniences for testing with connections\n      import Plug.Conn\n      import Phoenix.ConnTest\n      import Template.ConnCase\n    end\n  end\n\n  setup tags do\n    Template.DataCase.setup_sandbox(tags)\n    {:ok, conn: Phoenix.ConnTest.build_conn()}\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,40,40,null,null,null,null,null,null,null,null,null,null,null,4,4,0,null,null,null,null],"name":"test/support/data_case.ex","source":"defmodule Template.DataCase do\n  @moduledoc \"\"\"\n  This module defines the setup for tests requiring\n  access to the application's data layer.\n\n  You may define functions here to be used as helpers in\n  your tests.\n\n  Finally, if the test case interacts with the database,\n  we enable the SQL sandbox, so changes done to the database\n  are reverted at the end of every test. If you are using\n  PostgreSQL, you can even run database tests asynchronously\n  by setting `use Template.DataCase, async: true`, although\n  this option is not recommended for other databases.\n  \"\"\"\n\n  use Boundary\n  use ExUnit.CaseTemplate\n\n  using do\n    quote do\n      alias Template.Repo\n\n      import Ecto\n      import Ecto.Changeset\n      import Ecto.Query\n      import Template.DataCase\n    end\n  end\n\n  setup tags do\n    Template.DataCase.setup_sandbox(tags)\n    :ok\n  end\n\n  @doc \"\"\"\n  Sets up the sandbox based on the test tags.\n  \"\"\"\n  def setup_sandbox(tags) do\n    pid = Ecto.Adapters.SQL.Sandbox.start_owner!(Template.Repo, shared: not tags[:async])\n    on_exit(fn -> Ecto.Adapters.SQL.Sandbox.stop_owner(pid) end)\n  end\n\n  @doc \"\"\"\n  A helper that transforms changeset errors into a map of messages.\n\n      assert {:error, changeset} = Accounts.create_user(%{password: \"short\"})\n      assert \"password is too short\" in errors_on(changeset).password\n      assert %{password: [\"password is too short\"]} = errors_on(changeset)\n\n  \"\"\"\n  def errors_on(changeset) do\n    Ecto.Changeset.traverse_errors(changeset, fn {message, opts} ->\n      Regex.replace(~r\"%{(\\w+)}\", message, fn _, key ->\n        opts |> Keyword.get(String.to_existing_atom(key), key) |> to_string()\n      end)\n    end)\n  end\nend"},{"coverage":[null,null,null,null,null,null,null,null,null,null,44,null,null,null,null,null,null,null,44,null,null,null,44,null,null,null,32,null,32,32,null,null,null,null,null],"name":"test/support/fixtures/auth.ex","source":"defmodule Template.Fixtures.Auth do\n  @moduledoc false\n\n  use Boundary, check: [in: false, out: false]\n\n  alias Template.Repo\n  alias Template.Auth.Token\n  alias Template.Auth.User\n\n  def user_fixture(attrs \\\\ %{}) do\n    default_attrs = %{\n      provider: \"google\",\n      uid: make_ref() |> :erlang.ref_to_list() |> List.to_string(),\n      email: \"google_user@example.com\",\n      name: \"Google User\",\n      image: \"https://example.com/image.jpg\"\n    }\n\n    attrs = Map.merge(default_attrs, attrs)\n\n    %User{}\n    |> User.changeset(attrs)\n    |> Repo.insert!()\n  end\n\n  def token_fixture(attrs \\\\ %{token: :crypto.strong_rand_bytes(Token.token_size())}) do\n    user = user_fixture()\n\n    token =\n      %Token{token: attrs.token, user_id: user.id}\n      |> Repo.insert!()\n\n    {token, user}\n  end\nend"}]}